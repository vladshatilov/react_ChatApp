{"version":3,"sources":["chat_icon.svg","img.jpg","Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","props","useState","name","setName","className","src","logo","alt","id","value","placeholder","onChange","e","target","handleChangeName","onKeyDown","key","setNameInChat","document","getElementById","disabled","App","handleNewName","username","startPubNub","pubnub","addListener","message","msg","channel","state","channelName","text","messages","push","length","uuid","self","time","setState","PubNub","publishKey","subscribeKey","subscribe","channels","historyUpdate","history","count","stringifiedTimeToken","status","response","i","entry","shutDownPubNub","unsubscribe","publishMessage","newMessage","timePublish","Date","messageObject","getHours","getMinutes","toString","slice","publish","showPicker","focus","handleMessageChange","event","handleNewMessage","handleChannelChange","index","addEmoji","emoji","native","togglePicker","newChannel","this","ChannelList","selectChannel","ChatLog","CardActions","Input","fullWidth","maxlength","inputProps","autoFocus","title","onSelect","Button","onClick","size","color","Component","React","selectedIndex","setSelectedIndex","handleListItemClick","List","component","aria-label","ListItem","button","selected","ListItemIcon","ListItemText","primary","messagesContainer","createRef","useEffect","current","scrollTop","scrollHeight","ref","Typography","Message","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.2b513dc5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/chat_icon.260d02e4.svg\";","module.exports = __webpack_public_path__ + \"static/media/img.81462e32.jpg\";","import React,{useState} from 'react';\r\nimport './Header.css'\r\nimport logo from './chat_icon.svg';\r\n\r\n// import RoomTitle from '../room-title/RoomTitle';\r\n// <RoomTitle chatroomName={props.chatRoomName} />\r\nfunction Header(props) {\r\n\r\n\tconst [name, setName] = useState('')\r\n\t\r\n\tconst handleChangeName = (e) => {\r\n\t\tsetName(e.target.value)\r\n\t}\r\n\tconst handleNewMessage = (event) => {\r\n\t\tif (event.key === 'Enter') {\r\n\t\t\tprops.setNameInChat(name);\r\n            document.getElementById(\"NameHolder\").disabled = true;\r\n\t\t}\r\n\t}\r\n\treturn (\r\n\t\t<header className=\"headerClassHolder\">\r\n\t\t\t<div className=\"LogoHeader\">\r\n\t\t\t\t<img src={logo} className=\"App-logo\" alt=\"Chatix logo\" />\r\n\t\t\t</div>\r\n\t\t\t<div className=\"RoomTitle\">\r\n\t\t\t\t<h1>{'Mini slack'}</h1>\r\n\t\t\t</div>\r\n\t\t\t{\r\n\t\t\t\ttrue ?\r\n\t\t\t\t\t<input\r\n                        id=\"NameHolder\"\r\n\t\t\t\t\t\tclassName = 'name-input'\r\n\t\t\t\t\t\tvalue = {name}\r\n\t\t\t\t\t\tplaceholder = 'Type your name to connect'\r\n\t\t\t\t\t\tonChange = {(e) => handleChangeName(e)}\r\n\t\t\t\t\t\tonKeyDown={(e) => handleNewMessage(e)}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t: null\r\n\t\t\t}\r\n\t\t</header>\r\n\t);\r\n}\r\n\r\nexport default Header;","import React, { Component, useState, useEffect} from 'react';\nimport './App.css';\n\n\t\t//Using Pubnub as chat core\nimport PubNub from 'pubnub';\nimport {Card, CardActions, CardContent,List, ListItem,Button,Typography,Input} from '@material-ui/core';\nimport Header from './Header.js';\n\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Divider from '@material-ui/core/Divider';\n\n\t\t//and emoji-mart module to use emoji in chat\nimport 'emoji-mart/css/emoji-mart.css';\nimport { Picker } from 'emoji-mart';\nimport imageForChat from './img.jpg';\n\nclass App extends Component {\n\tconstructor(props){\n\t\tsuper(props);\n\n\t\t\n\n\t\tlet defaultChannel = \"work_init\";\n\t\tthis.state = {\n\t\t\tmessages: [],\n\t\t\tchannelName: defaultChannel,\n\t\t\tnewMessage: \"\",\n\t\t\tnewChannel: \"\",\n\t\t\tshowPicker: false,\n\t\t}\n\n\t\t\n\t\tthis.username = 'undefined';\n\t}\n\t\n\t\t\t//setting username and starting chat core\n\thandleNewName = (name) => {\n\t\tthis.username = name;\n\t\tthis.startPubNub();\n\n\t\t\t\t//listener to receive new message in real-time\n\t\tthis.pubnub.addListener({\t\n\t\tmessage: (msg) => {\n\t\t\tif (msg.channel === this.state.channelName){\n\t\t\tif(msg.message.text){\n\t\t\t\tlet messages = this.state.messages;\n\t\t\t\tmessages.push(\n\t\t\t\t\t<Message key={ this.state.messages.length } uuid={ msg.message.uuid } text={ msg.message.text } self={this.username==msg.message.uuid} time={ msg.message.time } />\n\t\t\t\t);\n\t\t\t\t\n\t\t\t\tthis.setState({\n\t\t\t\t\tmessages: messages\n\t\t\t\t});\n\t\t\t}}\n\t\t}\n\t\t});\n\t}\n\n\t\t\t//connect to my room and subscribe to channels (needed to receive messages)\n\tstartPubNub = () => {\n\t\tthis.pubnub = new PubNub({\n\t\t\tpublishKey: \"pub-c-954e6edf-f654-4196-87e1-c4aadd22220e\",\n\t\t\tsubscribeKey: \"sub-c-b8e4093c-d8c1-11ea-b3f2-c27cb65b13f4\",\n\t\t\tuuid: this.username\n\t\t\t});\n\t\tthis.pubnub.subscribe({\n\t\t\tchannels: [this.state.channelName,'talk_init']\n\t\t\t});\n\t\tthis.historyUpdate();\t\n\t}\n\n\t\t\t//updating history on connecting to the chat or switching between chats/channels\n\thistoryUpdate = () => {\n\t\tthis.setState({\n\t\t\t\t\tmessages: []\n\t\t\t\t});\n\t\tif(this.pubnub){\n\t\tthis.pubnub.history(\n\t\t\t{\n\t\t\t\tchannel: this.state.channelName,\n\t\t\t\tcount: 100, // 100 is the default\n\t\t\t\tstringifiedTimeToken: true // false is the default\n\t\t\t},(status, response) => {\n\n\t\t\t\tlet messages = this.state.messages;\n\t\t\t\tlet i;\n\t\t\t\tfor (i\t= 0; i < response.messages.length;i++){\n\t\t\t\t\tmessages.push(\n\t\t\t\t\t<Message key={ this.state.messages.length } uuid={ response.messages[i].entry.uuid } text={ response.messages[i].entry.text} self={this.username==response.messages[i].entry.uuid} time={response.messages[i].entry.time} />\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tthis.setState({\n\t\t\t\t\tmessages: messages\n\t\t\t\t});\n\t\t\t\t}\n\t\t\t);\n\t\t}\t\t\n\t}\n\n\n\tcomponentWillUnmount() {\n\t\t\tthis.shutDownPubNub();\n\t\t}\n\n\tshutDownPubNub = () => {\n\t\tthis.pubnub.unsubscribe({\n\t\t\t\tchannels: [this.state.channelName]\n\t\t});\n\t\tthis.setState({messages: []});\n\t}\n\t\n\n\t\t//Publishing messages via PubNub in case 'enter button' or click on 'send'\n\tpublishMessage = () => {\n\t\tif (this.state.newMessage) {\n\t\t\tlet timePublish = new Date();\n\t\t\tlet messageObject = {\n\t\t\t\ttext: this.state.newMessage,\n\t\t\t\tuuid: this.username,\n\t\t\t\ttime : `${timePublish.getHours()}:${('0'+(timePublish.getMinutes()).toString()).slice(-2)}`,\n\t\t\t\tself: true\n\t\t\t};\n\n\t\t\tif(this.pubnub){\n\t\t\t\tthis.pubnub.publish({\n\t\t\t\t\tmessage: messageObject,\n\t\t\t\t\tchannel: this.state.channelName,\n\t\t\t\t\t\n\t\t\t\t})\n\t\t}\n\t\t\tthis.setState({ newMessage: ''})\n\t\t\tif (this.state.showPicker) {\n\t\t\t\tthis.setState({showPicker : !this.state.showPicker})\n\t\t\t}\n\t\t\tdocument.getElementById(\"typeMessageForm\").focus(); \n\t\t}\n\t}\n\n\thandleMessageChange = (event) => {\n\tthis.setState({ newMessage: event.target.value });\n\t}\n\n\thandleNewMessage = (event) =>{\n\t\tif (event.key === 'Enter') {\n\t\t\tthis.publishMessage();\n\t\t}\n\t}\n\n\n\t\t\t// Updating history only after updating channels (because setState make it async)\n\thandleChannelChange = (event,index) => {\n\t\tif (index) {\n\t\t\tthis.setState({\n\t\t\t\tchannelName: 'talk_init'\n\t\t\t}, () => {\n\t\t\t\tthis.historyUpdate();\n\t\t\t});\n\t\t}\n\t\telse {\n\t\t\tthis.setState({\n\t\t\t\tchannelName: 'work_init'\n\t\t\t}, () => {\n\t\t\t\tthis.historyUpdate();\n\t\t\t});\n\t\t}\n\t}\n\n\t\t\t// Adding emoji :)\n\taddEmoji = (emoji) => {\n\t\tthis.setState({ newMessage: [this.state.newMessage + emoji.native] });\n\t}\n\n\t\t\t// Turn off emoji dialog window\n\ttogglePicker = () => {\n\t\tthis.setState ({showPicker : !this.state.showPicker});\n\t\t};\n\n\t\t\t// Chat consist of header, channel frame, chat frame and input with send form \n\trender() {\n\t\treturn (\n\t\t\t<div className={\"AppWindow\"}>\n\t\t\t<Header setNameInChat={this.handleNewName} />\n\t\t\t<div className={'chatWindow'} >\n\t\t\t\t<div className={'channelListSideBar'} ><ChannelList selectChannel={(e,i) => this.handleChannelChange(e,i)} />\n\t\t\t\t</div>\n\t\t\t\t<div className={'chatAndMessageWindow'} ><ChatLog messages={this.state.messages}/>\n\t\t\t\t<CardActions>\n\t\t\t\n\t\t\t\t<Input \n\t\t\t\t\tid={\"typeMessageForm\"}\n\t\t\t\t\tclassName={'inputFieldClass'}\n\t\t\t\t\tplaceholder=\"Type here...\"\n\t\t\t\t\tfullWidth={true}\n\t\t\t\t\tvalue={this.state.newMessage}\n\t\t\t\t\tonKeyDown={this.handleNewMessage}\n\t\t\t\t\tonChange={this.handleMessageChange}\n\t\t\t\t\tmaxlength=\"15\"\n\t\t\t\t\tinputProps={{\n\t\t\t\t\t'aria-label': 'Description',\n\t\t\t\t\t}}\n\t\t\t\t\tautoFocus={true}\n\t\t\t\t/>\n\t\t\t\t<div className = \"pickerStyle\">\n\t\t\t\t{this.state.showPicker ? (<Picker\n\t\t\t\t\t\n\t\t\t\t\temoji=\"\"\n\t\t\t\t\ttitle=\"\"\n\t\t\t\t\tnative={true}\n\t\t\t\t\tonSelect={ this.addEmoji}\n\t\t\t\t\t/>):null}\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t<Button className={\"butForSmile\"} onClick={this.togglePicker}>☺</Button>\n\t\t\t<Button\n\t\t\t\tsize=\"small\"\n\t\t\t\tcolor=\"primary\"\n\t\t\t\tonClick={this.publishMessage}>\n\t\t\t\tSend\n\t\t\t</Button>\n\t\t\t\n\n\t\t\t</CardActions>\n\t\t\t</div>\n\t\t\t</div>\n\t\t\t\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n\t\t//setting up channel list and perform its change through react useState and props.selectChannel func\nfunction ChannelList(props){\n\tconst [selectedIndex, setSelectedIndex] = React.useState(0);\n\tconst handleListItemClick = (event, index) => {\n\t\tsetSelectedIndex(index);\n\t\tprops.selectChannel(event,index);\n\t\t};\n\t\treturn(\n\t\t\t<div className={'classesroot'}>\n\t\t\t\t<List component=\"nav\" aria-label=\"main mailbox folders\">\n\t\t\t\t<ListItem\n\t\t\t\t\tbutton\n\t\t\t\t\tselected={selectedIndex === 0}\n\t\t\t\t\tonClick={(event) => handleListItemClick(event, 0)}\n\t\t\t\t>\n\t\t\t\t\t<ListItemIcon>\n\t\t\t\t\t</ListItemIcon>\n\t\t\t\t\t<ListItemText primary=\"Work\" />\n\t\t\t\t</ListItem>\n\t\t\t\t<ListItem\n\t\t\t\t\tbutton\n\t\t\t\t\tselected={selectedIndex === 1}\n\t\t\t\t\tonClick={(event) => handleListItemClick(event, 1)}\n\t\t\t\t>\n\t\t\t\t\t<ListItemIcon>\n\t\t\t\t\t</ListItemIcon>\n\t\t\t\t\t<ListItemText primary=\"Talk\" />\n\t\t\t\t</ListItem>\n\t\t\t\t</List>\t\t\t\t\n\t\t\t</div>\n\t\t)\n\t}\n\n\n\n\n\t\t//Simple component that renders the chat log and scroll it to the end\nfunction ChatLog(props){\n\tconst messagesContainer = React.createRef();\n\tuseEffect(() => {\n\t\tmessagesContainer.current.scrollTop = messagesContainer.current.scrollHeight\n\t}, [props, messagesContainer]);\n\t\n\t\treturn(\n\t\t\t<List className={\"listMessageFrame\"} component=\"nav\" ref={messagesContainer}>\n\t\t\t\t<ListItem>\n\t\t\t\t<Typography component=\"div\">\n\t\t\t\t\t{ props.messages }\n\t\t\t\t</Typography>\n\t\t\t\t</ListItem>\n\t\t\t</List>\n\t\t)\n\t\n}\n\n\t\t//Message commponent that set format for each message\nclass Message extends Component{\n\trender () {\n\t\treturn (\n\t\t\t<div >\n\t\t\t\t<div>\n\t\t\t\t\t<span className = \"nameStump\" >{this.props.uuid} </span>\n\t\t\t\t\t<span className = \"timeStump\" >{this.props.time} </span>\n\t\t\t\t</div>\t\t\n\n\t\t\t\t{this.props.self ? (\n\t\t\t\t\t<div className = \"messageStumpSelf\" >\n\t\t\t\t\t\t{ this.props.text }\n\t\t\t\t\t</div>\n\t\t\t\t):\n\t\t\t\t\t<div className = \"messageStump\" >\n\t\t\t\t\t\t{ this.props.text }\n\t\t\t\t\t</div>\n\t\t\t\t}\n\t\t\t</div>\n\t\t);\n\t}\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}